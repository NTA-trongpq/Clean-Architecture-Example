// Mocks generated by Mockito 5.2.0 from annotations
// in clean_tdd/test/features/presentation/pages/cinema/bloc/cinema_bloc.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:clean_tdd/features/domain/use_cases/cinema/cinema_use_cases.dart'
    as _i2;
import 'package:clean_tdd/features/presentation/pages/cinema/bloc/cinema_bloc.dart'
    as _i4;
import 'package:clean_tdd/features/presentation/pages/cinema/bloc/cinema_event.dart'
    as _i6;
import 'package:clean_tdd/features/presentation/pages/cinema/bloc/cinema_state.dart'
    as _i3;
import 'package:flutter_bloc/flutter_bloc.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeCinemaUseCase_0 extends _i1.Fake implements _i2.CinemaUseCase {}

class _FakeCinemaState_1 extends _i1.Fake implements _i3.CinemaState {}

/// A class which mocks [CinemaBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockCinemaBloc extends _i1.Mock implements _i4.CinemaBloc {
  MockCinemaBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CinemaUseCase get useCase =>
      (super.noSuchMethod(Invocation.getter(#useCase),
          returnValue: _FakeCinemaUseCase_0()) as _i2.CinemaUseCase);
  @override
  _i3.CinemaState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeCinemaState_1()) as _i3.CinemaState);
  @override
  _i5.Stream<_i3.CinemaState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i3.CinemaState>.empty())
          as _i5.Stream<_i3.CinemaState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i5.Future<void> getCinema(
          _i6.GetCinema? event, _i7.Emitter<_i3.CinemaState>? emitter) =>
      (super.noSuchMethod(Invocation.method(#getCinema, [event, emitter]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> loadMore(
          _i6.LoadMoreCinema? event, _i7.Emitter<_i3.CinemaState>? emitter) =>
      (super.noSuchMethod(Invocation.method(#loadMore, [event, emitter]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  void add(_i6.CinemaEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i6.CinemaEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i3.CinemaState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i6.CinemaEvent>(
          _i7.EventHandler<E, _i3.CinemaState>? handler,
          {_i7.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i7.Transition<_i6.CinemaEvent, _i3.CinemaState>? transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  void onChange(_i7.Change<_i3.CinemaState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}
