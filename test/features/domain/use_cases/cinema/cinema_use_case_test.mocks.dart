// Mocks generated by Mockito 5.2.0 from annotations
// in clean_tdd/test/features/domain/use_cases/cinema/cinema_use_case_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:clean_tdd/features/data/models/movie/movie_response.dart'
    as _i3;
import 'package:clean_tdd/features/domain/repositories/cinema_repositories/i_cinema_repositories.dart'
    as _i2;
import 'package:clean_tdd/features/domain/use_cases/cinema/cinema_use_cases.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeICinemaRepositories_0 extends _i1.Fake
    implements _i2.ICinemaRepositories {}

class _FakeMovieResponse_1 extends _i1.Fake implements _i3.MovieResponse {}

/// A class which mocks [CinemaUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCinemaUseCase extends _i1.Mock implements _i4.CinemaUseCase {
  MockCinemaUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ICinemaRepositories get repositories => (super.noSuchMethod(
      Invocation.getter(#repositories),
      returnValue: _FakeICinemaRepositories_0()) as _i2.ICinemaRepositories);
  @override
  _i5.Future<_i3.MovieResponse> getCinema({int? page = 1}) =>
      (super.noSuchMethod(Invocation.method(#getCinema, [], {#page: page}),
              returnValue:
                  Future<_i3.MovieResponse>.value(_FakeMovieResponse_1()))
          as _i5.Future<_i3.MovieResponse>);
}
